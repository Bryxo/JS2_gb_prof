const API = 'https://raw.githubusercontent.com/GeekBrainsTutorial/online-store-api/master/responses';

const app = new Vue({ //создаем объект app класса vue
   el: '#app', //указывается элемент с которым синхронизируемся
   data: { /* глобальные свойства нашего объекта app, к которым можно обращаться
   в методах через this. В вёрстке через {{ xxxx }}*/
      catalogUrl: '/catalogData.json', //путь к файлу json с товаров каталога
      cartUrl: '/getBasket.json', //путь к файлу json с товарами корзины
      cartItems: [], //массив с товарами корзины
      products: [],// массив товаров каталога
      filtered: [], //массив отфильтрованных товаров
      imgCart: 'https://via.placeholder.com/50x100', //картинка для всех товаров корзины
      imgCatalog: 'https://via.placeholder.com/200x150', //картинка для всех товаров корзины
      userSearch: '', /* отвечает за фильтр (что записывается фильтр сразу же 
            записывается в userSearch - строка 16 index.html: v-model="userSearch")*/
      showCart: false, //отвечает за показ корзины - по умолчанию: корзина скрыта
      error: false //
   },
   methods: {
      filter() {
         const regexp = new RegExp(this.userSearch, 'i');
         this.filtered = this.products.filter(product => regexp.test(product.product_name)); /*применяем к массиву products
            метод filter - у каждого товара (в данном случае это product) берем имя и сопоставляем с нашим правилом указанном 
            в регулярном выражении. Если возвращает true, то товар помещается в массив filtered из массива products */
      },
      getJson(url) { //принимаем url 
         return fetch(url) //делаем коннект к url, получаем promise
            .then(result => result.json()) //преобразуем (парсим) файл json в объект js и тоже вернем promise
            .catch(error => { //если ошибка, то выводим ее в консоль
               console.log(error);
            })
      },
      remove(item) { //принимаем товар item из корзины, который следует удалить
         this.getJson(`${API}/addToBasket.json`) /*делаем коннект к url, получаем promise 
            (чтобы узнать, можем мы изменять содержание корзины или нет)*/
            .then(data => {
               if (data.result === 1) { //если менять корзину можем (признак=1), то
                  if (item.quantity > 1) { //если таких товаров больше 1, то
                     item.quantity--; // уменьшаем количество таких товаров на 1 декрементом
                  } else { //если таких товаров не больше 1, то
                     this.cartItems.splice(this.cartItems.indexOf(item), 1); /*удаляем наш элемент 
                           по индексу, т.е. находим индекс вхождения нашего товара в массив и удаляем этот элемент, 
                           в количестве 1 штука*/
                  }
               }
            })
      },
      addProduct(product) { //принимаем товар product из каталога товаров, который следует добавить в корзину
         this.getJson(`${API}/addToBasket.json`) /*делаем коннект к url, получаем promise 
            (чтобы узнать, можем мы изменять содержание корзины или нет)*/
            .then(data => {
               if (data.result === 1) {//если менять корзину можем (признак=1), то
                  let find = this.cartItems.find(el => el.id_product === product.id_product); //проверка наличия товара в корзине
                  /* применяем к массиву cartItems метод find - обходим все элементы массива cartItems (в данном случае это el) и
                  ищем товар по id (т.е. сравниваем id товара в массиве cartItems с id товара который добавляется - прилетает
                  по клику по кнопке buy-btn (строка 68 index.html)). Если товар найден, то записываем его в массив find
                  берем имя и сопоставляем с нашим правилом указанном 
          в регулярном выражении. Если возвращает true, то товар помещается в массив filtered из массива products */
                  if (find) { //если find=true, т.е. товар найден, то
                     find.quantity++; //берем свойство quantity массива find и увеличиваем на 1 (инкремент)
                     // -- свойство quantity присутствует у каждого элемента массива cartItems-- //
                  } else { //если find=false, т.е. товар не найден, то нужно его создать в корзине
                     const prod = Object.assign({ quantity: 1 }, product);/*создание нового объекта prod на основе двух, указанных 
                           в параметрах, склеиванием двух объектов в один с помощью assign. 
                           Товар в корзине отличается от товара каталога только наличием свойства quantity у товара корзины. 
                           Для преобразования товара каталога в товар корзины мы к товару каталога добавляем свойство quantity 
                           со значением = 1 и получается новый объект prod товара корзины. (product в данном случае это объект товара 
                           каталога (без свойства quantity))*/
                     this.cartItems.push(prod) //и этот объект prod добавим в массив товаров корзины cartItems
                  }
               }
            })
      },
   },
   mounted() { //onload /запускается при создании объекта vue /заполнение МАССИВОВ товаров на основе файлов json
      this.getJson(`${API + this.cartUrl}`) //1 вызов метода getJson - к товарам корзины, и получаем объект (т.к. так устроен файл корзины(всё обёрнуто в фигурные скобки))
         .then(data => { //data - это объект, содержащий всю информацию о корзине 
            for (let el of data.contents) { /*в цикле обходим все товары корзины (contents - свойство корзины, в нём хранится инф. о товарах (структура файла корзины такая)).
               el - в данном случае это каждый товар корзины (можно назвать как угодно)*/
               this.cartItems.push(el); //берем каждый товар корзины и добавляем его в массив cartItems
            }
         });
      this.getJson(`${API + this.catalogUrl}`) //2 вызов метода getJson - к товарам каталога (из интернета), и получаем массив объектов (т.к. так устроен файл каталога(всё обёрнуто в квадратные скобки))
         .then(data => {
            for (let el of data) {/*в цикле обходим все товары каталога.
                  el - в данном случае это каждый товар каталога (можно назвать как угодно)*/
               this.$data.products.push(el); //берем каждый товар каталога и добавляем его в массив products
               this.$data.filtered.push(el); //берем каждый товар каталога и добавляем его в массив filtered
               /*$data.products и $data.filtered - т.к. они находятся в свойстве data ($data нужен для обращения
               напрямую к свойству data (без использования this), доллар можно не писать, но лучше его использовать).*/
            }
         })
      this.getJson(`getProducts.json`) //3 вызов метода getJson - к товарам каталога (из локального файла)
         .then(data => {
            for (let el of data) {
               this.products.push(el);
               this.filtered.push(el);
            }
         })
   }
})